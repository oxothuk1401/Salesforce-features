//CLONE records with child records
Set<Id> clonedRecordIds = new Set<Id>{'a2P5r000000zU7nEAE'};
List<List_View__c> listViews = [
    SELECT Id, Name, Is_Default__c, List_View_Api_Name__c, Object_Api_Name__c, Condition__c,
    	(SELECT Id, List_View__c, Cell_Attributes__c, Field_Name__c, Fixed_Width__c, Icon_Name__c, Is_Editable__c, Is_Header_Label_Hidden__c, Is_Sortable__c, Order__c, Type_Attributes__c, Type__c, Name FROM Columns__r LIMIT 200) 
    FROM List_View__c 
	WHERE Id IN :clonedRecordIds
	LIMIT 200
];

List<List_View__c> clone = listViews.deepClone();
insert clone;

List<Column__c> clonedColumns = new List<Column__c>();
for (Integer i = 0; i < clone.size(); i++) {
	List<Column__c> tempChildRecords = clone[i].Columns__r.deepClone();
    for (Column__c newChildRecord : tempChildRecords) {
        newChildRecord.List_View__c = clone[i].Id;
    }
	
	clonedColumns.addAll(tempChildRecords);
}

insert clonedColumns;

===================================================================================================================================================================================================
//CLONE one or several records

List<Programme__c> progrmamms = [
	SELECT Id, Programme_Configuration__c, Account__c, Start_Date__c, End_Date__c, Programme_Type__c, Location__c, Day_One__c, Day_Two__c, Day_Three__c, Day_Four__c, Day_Five__c, Teacher_Email_Address__c, Teacher_Contact_Phone__c, Target_Volunteer_Audience__c, Publish_Immediately__c, Assigned_Volunteer__c, Info__c, Status__c, The_cancellation_is_on_behalf_of_the__c, Reason__c, Further_Information__c, Will_you_be_republishing_this_programme__c, Teacher_Name__c, Volunteer__c, Pupil__c, Completed_Sessions__c, Canceled_Sessions__c, Auto_roll_programme_forward__c, Name 
	FROM Programme__c 
	LIMIT 1];
List<Programme__c> cloned = progrmamms.deepClone();
insert cloned;
